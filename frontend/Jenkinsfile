pipeline {
    agent any

    triggers {
        githubPush()
    }

    environment {
        FLUTTER_HOME = '/opt/flutter'
        ANDROID_HOME = '/opt/android-sdk'
        PATH = "$FLUTTER_HOME/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/cmdline-tools/latest/bin:$PATH"
        AZURE_STORAGE_ACCOUNT = 'tongiapks'
        AZURE_CONTAINER = 'apk'
        APK_PATH = 'frontend/build/app/outputs/flutter-apk/app-release.apk'
        GRADLE_OPTS = '-Dorg.gradle.vfs.watch=false' // üîß Desactiva file watcher de Gradle
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Clean environment') {
            steps {
                sh '''
                    echo "üßπ Limpiando cach√©s locales..."
                    rm -rf ~/.gradle/caches || true
                    rm -rf ~/.gradle/daemon || true
                    rm -rf ~/.gradle/native || true
                    rm -rf ~/.gradle/wrapper || true
                    rm -rf frontend/build || true
                    rm -rf frontend/.dart_tool || true
                    rm -rf frontend/.gradle || true
                '''
            }
        }

        stage('Install dependencies') {
            steps {
                dir('frontend') {
                    sh '''
                        echo "üì¶ Instalando dependencias Flutter..."
                        flutter pub get
                    '''
                }
            }
        }

        stage('Run tests') {
            steps {
                dir('frontend') {
                    sh '''
                        echo "üß™ Ejecutando tests..."
                        flutter test
                    '''
                }
            }
        }

        stage('Prepare signing keys') {
            steps {
                withCredentials([
                    file(credentialsId: 'flutter-keystore', variable: 'KEYSTORE_FILE'),
                    string(credentialsId: 'store_password', variable: 'STORE_PASSWORD'),
                    string(credentialsId: 'key_password', variable: 'KEY_PASSWORD'),
                    string(credentialsId: 'key_alias', variable: 'KEY_ALIAS')
                ]) {
                    dir('frontend/android') {
                        sh '''
                            echo "üîê Configurando firma..."
                            echo "storePassword=$STORE_PASSWORD" > key.properties
                            echo "keyPassword=$KEY_PASSWORD" >> key.properties
                            echo "keyAlias=$KEY_ALIAS" >> key.properties
                            echo "storeFile=${WORKSPACE}/frontend/android/app/release-key.jks" >> key.properties
                            cp $KEYSTORE_FILE app/release-key.jks
                            cat key.properties
                        '''
                    }
                }
            }
        }

        stage('Build APK') {
            steps {
                dir('frontend') {
                    sh '''
                        echo "üèóÔ∏è Construyendo APK de producci√≥n..."
                        export ANDROID_HOME=/opt/android-sdk
                        export PATH=$ANDROID_HOME/platform-tools:$ANDROID_HOME/cmdline-tools/latest/bin:$PATH
        
                        flutter doctor -v
                        flutter clean
                        flutter build apk --release --no-shrink --verbose
                    '''
                }
            }
        }

        stage('Upload to Azure Blob Storage') {
            steps {
                withCredentials([
                    string(credentialsId: 'azure-client-id', variable: 'AZURE_CLIENT_ID'),
                    string(credentialsId: 'azure-client-secret', variable: 'AZURE_CLIENT_SECRET'),
                    string(credentialsId: 'azure-tenant-id', variable: 'AZURE_TENANT_ID')
                ]) {
                    sh '''
                        echo "‚òÅÔ∏è Autenticando con Azure..."
                        az login --service-principal \
                            -u "$AZURE_CLIENT_ID" \
                            -p "$AZURE_CLIENT_SECRET" \
                            --tenant "$AZURE_TENANT_ID"

                        echo "‚¨ÜÔ∏è Subiendo APK a Azure Blob Storage..."
                        az storage blob upload \
                            --account-name "$AZURE_STORAGE_ACCOUNT" \
                            --container-name "$AZURE_CONTAINER" \
                            --name "tongi-$(date +%Y%m%d%H%M).apk" \
                            --file "$APK_PATH" \
                            --auth-mode login

                        echo "‚úÖ Upload completado correctamente!"
                    '''
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ Frontend build exitoso.'
        }
        failure {
            echo '‚ùå Frontend build fall√≥.'
        }
        always {
            cleanWs(cleanWhenAborted: true, cleanWhenFailure: true)
        }
    }
}
