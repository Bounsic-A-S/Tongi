pipeline {
    agent any
    triggers {
        githubPush()
    }
    environment {
        FLUTTER_HOME = '/opt/flutter'
        ANDROID_HOME = '/opt/android-sdk'
        PATH = "$FLUTTER_HOME/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/cmdline-tools/latest/bin:$PATH"
        AZURE_STORAGE_ACCOUNT = 'tongiapks'
        AZURE_CONTAINER = 'apk'                
        APK_PATH = 'frontend/build/app/outputs/flutter-apk/app-release.apk'
    }
    stages {
        stage('Install dependencies') {
            steps {
                dir('frontend') {
                    sh 'flutter pub get'
                }
            }
        }
        stage('Run tests') {
            steps {
                dir('frontend') {
                    sh 'flutter test'
                }
            }
        }
        stage('Prepare signing keys') {
            steps {
                withCredentials([
                    file(credentialsId: 'flutter-keystore', variable: 'KEYSTORE_FILE'),
                    string(credentialsId: 'store_password', variable: 'STORE_PASSWORD'),
                    string(credentialsId: 'key_password', variable: 'KEY_PASSWORD'),
                    string(credentialsId: 'key_alias', variable: 'KEY_ALIAS')
                ]) {
                    dir('frontend/android') {
                        sh '''
                            echo "storePassword=$STORE_PASSWORD" > key.properties
                            echo "keyPassword=$KEY_PASSWORD" >> key.properties
                            echo "keyAlias=$KEY_ALIAS" >> key.properties
                            echo "storeFile=app/release-key.jks" >> key.properties
                            cp $KEYSTORE_FILE app/release-key.jks
                        '''
                    }
                }
            }
        }

        stage('Build APK') {
            steps {
                dir('frontend') {
                    sh 'flutter clean'
                    sh 'flutter build apk --release --no-shrink --verbose'
                }
            }
        }
        stage('Upload to Azure Blob') {
            steps {
                withCredentials([
                    string(credentialsId: 'azure-client-id', variable: 'AZURE_CLIENT_ID'),
                    string(credentialsId: 'azure-client-secret', variable: 'AZURE_CLIENT_SECRET'),
                    string(credentialsId: 'azure-tenant-id', variable: 'AZURE_TENANT_ID')
                ]) {
                    sh '''
                        echo "Autenticando con Azure..."
                        az login --service-principal \
                            -u "$AZURE_CLIENT_ID" \
                            -p "$AZURE_CLIENT_SECRET" \
                            --tenant "$AZURE_TENANT_ID"

                        echo "Subiendo APK a Azure Blob Storage..."
                        az storage blob upload \
                            --account-name "$AZURE_STORAGE_ACCOUNT" \
                            --container-name "$AZURE_CONTAINER" \
                            --name "tongi-$(date +%Y%m%d%H%M).apk" \
                            --file "$APK_PATH" \
                            --auth-mode login

                        echo "✅ Upload completado correctamente!"
                    '''
                }
            }
        }
    }
    post {
        success {
            echo '✅ Frontend production successful!'
            archiveArtifacts artifacts: 'frontend/build/app/outputs/flutter-apk/*.apk', fingerprint: true
        }
        failure {
            echo '❌ Frontend production failed.'
        }
    }
}
